{"ast":null,"code":"/**\n * React Router v6.0.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { createContext, useRef, useState, useLayoutEffect, createElement, useContext, useEffect, useMemo, useCallback, Children, isValidElement, Fragment } from 'react';\nimport { createMemoryHistory, Action, parsePath } from 'history';\nfunction invariant(cond, message) {\n  if (!cond) throw new Error(message);\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nconst alreadyWarned = {};\nfunction warningOnce(key, cond, message) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    process.env.NODE_ENV !== \"production\" ? warning(false, message) : void 0;\n  }\n} ///////////////////////////////////////////////////////////////////////////////\n// CONTEXT\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\n\nconst NavigationContext = /*#__PURE__*/createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  NavigationContext.displayName = \"Navigation\";\n}\nconst LocationContext = /*#__PURE__*/createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  LocationContext.displayName = \"Location\";\n}\nconst RouteContext = /*#__PURE__*/createContext({\n  outlet: null,\n  matches: []\n});\nif (process.env.NODE_ENV !== \"production\") {\n  RouteContext.displayName = \"Route\";\n} ///////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/docs/en/v6/api#memoryrouter\n */\nfunction MemoryRouter(_ref) {\n  let {\n    basename,\n    children,\n    initialEntries,\n    initialIndex\n  } = _ref;\n  let historyRef = useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex\n    });\n  }\n  let history = historyRef.current;\n  let [state, setState] = useState({\n    action: history.action,\n    location: history.location\n  });\n  useLayoutEffect(() => history.listen(setState), [history]);\n  return /*#__PURE__*/createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/docs/en/v6/api#navigate\n */\nfunction Navigate(_ref2) {\n  let {\n    to,\n    replace,\n    state\n  } = _ref2;\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of\n  // the router loaded. We can help them understand how to avoid that.\n  \"<Navigate> may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!useContext(NavigationContext).static, \"<Navigate> must not be used on the initial render in a <StaticRouter>. \" + \"This is a no-op, but you should modify your code so the <Navigate> is \" + \"only ever rendered in response to some user interaction or state change.\") : void 0;\n  let navigate = useNavigate();\n  useEffect(() => {\n    navigate(to, {\n      replace,\n      state\n    });\n  });\n  return null;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/docs/en/v6/api#outlet\n */\nfunction Outlet(_props) {\n  return useOutlet();\n}\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#route\n */\nfunction Route(_props) {\n  process.env.NODE_ENV !== \"production\" ? invariant(false, \"A <Route> is only ever to be used as the child of <Routes> element, \" + \"never rendered directly. Please wrap your <Route> in a <Routes>.\") : invariant(false);\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/docs/en/v6/api#router\n */\nfunction Router(_ref3) {\n  let {\n    basename: basenameProp = \"/\",\n    children = null,\n    location: locationProp,\n    navigationType = Action.Pop,\n    navigator,\n    static: staticProp = false\n  } = _ref3;\n  !!useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You cannot render a <Router> inside another <Router>.\" + \" You should never have more than one in your app.\") : invariant(false) : void 0;\n  let basename = normalizePathname(basenameProp);\n  let navigationContext = useMemo(() => ({\n    basename,\n    navigator,\n    static: staticProp\n  }), [basename, navigator, staticProp]);\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n  let location = useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n    if (trailingPathname == null) {\n      return null;\n    }\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key\n    };\n  }, [basename, pathname, search, hash, state, key]);\n  process.env.NODE_ENV !== \"production\" ? warning(location != null, \"<Router basename=\\\"\" + basename + \"\\\"> is not able to match the URL \" + (\"\\\"\" + pathname + search + hash + \"\\\" because it does not start with the \") + \"basename, so the <Router> won't render anything.\") : void 0;\n  if (location == null) {\n    return null;\n  }\n  return /*#__PURE__*/createElement(NavigationContext.Provider, {\n    value: navigationContext\n  }, /*#__PURE__*/createElement(LocationContext.Provider, {\n    children: children,\n    value: {\n      location,\n      navigationType\n    }\n  }));\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#routes\n */\nfunction Routes(_ref4) {\n  let {\n    children,\n    location\n  } = _ref4;\n  return useRoutes(createRoutesFromChildren(children), location);\n} ///////////////////////////////////////////////////////////////////////////////\n// HOOKS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usehref\n */\n\nfunction useHref(to) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useHref() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = useContext(NavigationContext);\n  let {\n    hash,\n    pathname,\n    search\n  } = useResolvedPath(to);\n  let joinedPathname = pathname;\n  if (basename !== \"/\") {\n    let toPathname = getToPathname(to);\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname = pathname === \"/\" ? basename + (endsWithSlash ? \"/\" : \"\") : joinPaths([basename, pathname]);\n  }\n  return navigator.createHref({\n    pathname: joinedPathname,\n    search,\n    hash\n  });\n}\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext\n */\n\nfunction useInRouterContext() {\n  return useContext(LocationContext) != null;\n}\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/docs/en/v6/api#uselocation\n */\n\nfunction useLocation() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useLocation() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return useContext(LocationContext).location;\n}\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigationtype\n */\n\nfunction useNavigationType() {\n  return useContext(LocationContext).navigationType;\n}\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usematch\n */\n\nfunction useMatch(pattern) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useMatch() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  return matchPath(pattern, useLocation().pathname);\n}\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigate\n */\nfunction useNavigate() {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useNavigate() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    basename,\n    navigator\n  } = useContext(NavigationContext);\n  let {\n    matches\n  } = useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\n  let activeRef = useRef(false);\n  useEffect(() => {\n    activeRef.current = true;\n  });\n  let navigate = useCallback(function (to, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    process.env.NODE_ENV !== \"production\" ? warning(activeRef.current, \"You should call navigate() in a React.useEffect(), not when \" + \"your component is first rendered.\") : void 0;\n    if (!activeRef.current) return;\n    if (typeof to === \"number\") {\n      navigator.go(to);\n      return;\n    }\n    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname);\n    if (basename !== \"/\") {\n      path.pathname = joinPaths([basename, path.pathname]);\n    }\n    (!!options.replace ? navigator.replace : navigator.push)(path, options.state);\n  }, [basename, navigator, routePathnamesJson, locationPathname]);\n  return navigate;\n}\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useoutlet\n */\n\nfunction useOutlet() {\n  return useContext(RouteContext).outlet;\n}\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useparams\n */\n\nfunction useParams() {\n  let {\n    matches\n  } = useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? routeMatch.params : {};\n}\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath\n */\n\nfunction useResolvedPath(to) {\n  let {\n    matches\n  } = useContext(RouteContext);\n  let {\n    pathname: locationPathname\n  } = useLocation();\n  let routePathnamesJson = JSON.stringify(matches.map(match => match.pathnameBase));\n  return useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname), [to, routePathnamesJson, locationPathname]);\n}\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useroutes\n */\n\nfunction useRoutes(routes, locationArg) {\n  !useInRouterContext() ? process.env.NODE_ENV !== \"production\" ? invariant(false,\n  // TODO: This error is probably because they somehow have 2 versions of the\n  // router loaded. We can help them understand how to avoid that.\n  \"useRoutes() may be used only in the context of a <Router> component.\") : invariant(false) : void 0;\n  let {\n    matches: parentMatches\n  } = useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n  if (process.env.NODE_ENV !== \"production\") {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = parentRoute && parentRoute.path || \"\";\n    warningOnce(parentPathname, !parentRoute || parentPath.endsWith(\"*\"), \"You rendered descendant <Routes> (or called `useRoutes()`) at \" + (\"\\\"\" + parentPathname + \"\\\" (under <Route path=\\\"\" + parentPath + \"\\\">) but the \") + \"parent route path has no trailing \\\"*\\\". This means if you navigate \" + \"deeper, the parent won't match anymore and therefore the child \" + \"routes will never render.\\n\\n\" + (\"Please change the parent <Route path=\\\"\" + parentPath + \"\\\"> to <Route \") + (\"path=\\\"\" + parentPath + \"/*\\\">.\"));\n  }\n  let locationFromContext = useLocation();\n  let location;\n  if (locationArg) {\n    var _parsedLocationArg$pa;\n    let parsedLocationArg = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n    !(parentPathnameBase === \"/\" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, \" + \"the location pathname must begin with the portion of the URL pathname that was \" + (\"matched by all parent routes. The current pathname base is \\\"\" + parentPathnameBase + \"\\\" \") + (\"but pathname \\\"\" + parsedLocationArg.pathname + \"\\\" was given in the `location` prop.\")) : invariant(false) : void 0;\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n  let pathname = location.pathname || \"/\";\n  let remainingPathname = parentPathnameBase === \"/\" ? pathname : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, {\n    pathname: remainingPathname\n  });\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? warning(parentRoute || matches != null, \"No routes matched location \\\"\" + location.pathname + location.search + location.hash + \"\\\" \") : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(matches == null || matches[matches.length - 1].route.element !== undefined, \"Matched leaf route at location \\\"\" + location.pathname + location.search + location.hash + \"\\\" does not have an element. \" + \"This means it will render an <Outlet /> with a null value by default resulting in an \\\"empty\\\" page.\") : void 0;\n  }\n  return _renderMatches(matches && matches.map(match => Object.assign({}, match, {\n    params: Object.assign({}, parentParams, match.params),\n    pathname: joinPaths([parentPathnameBase, match.pathname]),\n    pathnameBase: match.pathnameBase === \"/\" ? parentPathnameBase : joinPaths([parentPathnameBase, match.pathnameBase])\n  })), parentMatches);\n} ///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren\n */\n\nfunction createRoutesFromChildren(children) {\n  let routes = [];\n  Children.forEach(children, element => {\n    if (! /*#__PURE__*/isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n    if (element.type === Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(routes, createRoutesFromChildren(element.props.children));\n      return;\n    }\n    !(element.type === Route) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"[\" + (typeof element.type === \"string\" ? element.type : element.type.name) + \"] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>\") : invariant(false) : void 0;\n    let route = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path\n    };\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n    routes.push(route);\n  });\n  return routes;\n}\n/**\n * The parameters that were parsed from the URL path.\n */\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\n */\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    !(params[key] != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Missing \\\":\" + key + \"\\\" param\") : invariant(false) : void 0;\n    return params[key];\n  }).replace(/\\/*\\*$/, _ => params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\"));\n}\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], routes, pathname);\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      !meta.relativePath.startsWith(parentPath) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\") : invariant(false) : void 0;\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      !(route.index !== true) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\")) : invariant(false) : void 0;\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch,\n// TODO: attach original route object inside routesMeta so we don't need this arg\nroutesArg, pathname) {\n  let routes = routesArg;\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = routes[meta.childrenIndex];\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: joinPaths([matchedPathname, match.pathnameBase]),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n    routes = route.children;\n  }\n  return matches;\n}\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\n\nfunction renderMatches(matches) {\n  return _renderMatches(matches);\n}\nfunction _renderMatches(matches, parentMatches) {\n  if (parentMatches === void 0) {\n    parentMatches = [];\n  }\n  if (matches == null) return null;\n  return matches.reduceRight((outlet, match, index) => {\n    return /*#__PURE__*/createElement(RouteContext.Provider, {\n      children: match.route.element !== undefined ? match.route.element : /*#__PURE__*/createElement(Outlet, null),\n      value: {\n        outlet,\n        matches: parentMatches.concat(matches.slice(0, index + 1))\n      }\n    });\n  }, null);\n}\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  process.env.NODE_ENV !== \"production\" ? warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\")) : void 0;\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n    :\n    // Otherwise, at least match a word boundary. This restricts parent\n    // routes to matching only their own words and nothing more, e.g. parent\n    // route \"/home\" should not match \"/home2\".\n    \"(?:\\\\b|$)\";\n  }\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    process.env.NODE_ENV !== \"production\" ? warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\")) : void 0;\n    return value;\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction resolveTo(toArg, routePathnames, locationPathname) {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname; // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  let from;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original to value had one.\n\n  if (toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\") && !path.pathname.endsWith(\"/\")) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  let nextChar = pathname.charAt(basename.length);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(basename.length) || \"/\";\n}\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash; ///////////////////////////////////////////////////////////////////////////////\n\nexport { MemoryRouter, Navigate, Outlet, Route, Router, Routes, LocationContext as UNSAFE_LocationContext, NavigationContext as UNSAFE_NavigationContext, RouteContext as UNSAFE_RouteContext, createRoutesFromChildren, generatePath, matchPath, matchRoutes, renderMatches, resolvePath, useHref, useInRouterContext, useLocation, useMatch, useNavigate, useNavigationType, useOutlet, useParams, useResolvedPath, useRoutes };","map":{"version":3,"mappings":";;;;;;;;;;;;AAiBA,SAASA,SAAT,CAAmBC,IAAnB,EAA8BC,OAA9B,EAA6D;EAC3D,IAAI,CAACD,IAAL,EAAW,MAAM,IAAIE,KAAJ,CAAUD,OAAV,CAAN;AACZ;AAED,SAASE,OAAT,CAAiBH,IAAjB,EAA4BC,OAA5B,EAAmD;EACjD,IAAI,CAACD,IAAL,EAAW;IACT;IACA,IAAI,OAAOI,OAAP,KAAmB,WAAvB,EAAoCA,OAAO,CAACC,IAAR,CAAaJ,OAAb;IAEpC,IAAI;MACF;MACA;MACA;MACA;MACA;MACA,MAAM,IAAIC,KAAJ,CAAUD,OAAV,CAAN,CANE;IAQH,CARD,CAQE,OAAOK,CAAP,EAAU;EACb;AACF;AAED,MAAMC,aAAsC,GAAG,EAA/C;AACA,SAASC,WAAT,CAAqBC,GAArB,EAAkCT,IAAlC,EAAiDC,OAAjD,EAAkE;EAChE,IAAI,CAACD,IAAD,IAAS,CAACO,aAAa,CAACE,GAAD,CAA3B,EAAkC;IAChCF,aAAa,CAACE,GAAD,CAAb,GAAqB,IAArB;IACAC,+CAAO,CAAC,KAAD,EAAQT,OAAR,CAAP;EACD;AACF;AAGD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MAYMU,iBAAiB,gBAAGC,cAA6C,IAA7C;AAE1B,2CAAa;EACXD,iBAAiB,CAACE,WAAlB,GAAgC,YAAhC;AACD;MAOKC,eAAe,gBAAGF,cAA2C,IAA3C;AAExB,2CAAa;EACXE,eAAe,CAACD,WAAhB,GAA8B,UAA9B;AACD;MAOKE,YAAY,gBAAGH,cAAwC;EAC3DI,MAAM,EAAE,IADmD;EAE3DC,OAAO,EAAE;AAFkD,CAAxC;AAKrB,2CAAa;EACXF,YAAY,CAACF,WAAb,GAA2B,OAA3B;AACD;AAGD;AACA;;AASA;AACA;AACA;AACA;AACA;AACO,SAASK,YAAT,OAKmC;EAAA,IALb;IAC3BC,QAD2B;IAE3BC,QAF2B;IAG3BC,cAH2B;IAI3BC;EAJ2B,CAKa;EACxC,IAAIC,UAAU,GAAGX,QAAjB;EACA,IAAIW,UAAU,CAACC,OAAX,IAAsB,IAA1B,EAAgC;IAC9BD,UAAU,CAACC,OAAX,GAAqBC,mBAAmB,CAAC;MAAEJ,cAAF;MAAkBC;IAAlB,CAAD,CAAxC;EACD;EAED,IAAII,OAAO,GAAGH,UAAU,CAACC,OAAzB;EACA,IAAI,CAACG,KAAD,EAAQC,QAAR,IAAoBhB,SAAe;IACrCiB,MAAM,EAAEH,OAAO,CAACG,MADqB;IAErCC,QAAQ,EAAEJ,OAAO,CAACI;EAFmB,CAAf,CAAxB;EAKAlB,gBAAsB,MAAMc,OAAO,CAACK,MAAR,CAAeH,QAAf,CAA5B,EAAsD,CAACF,OAAD,CAAtD;EAEA,oBACEM,cAACC,MAAD;IACEd,QAAQ,EAAEA,QADZ;IAEEC,QAAQ,EAAEA,QAFZ;IAGEU,QAAQ,EAAEH,KAAK,CAACG,QAHlB;IAIEI,cAAc,EAAEP,KAAK,CAACE,MAJxB;IAKEM,SAAS,EAAET;EALb,EADF;AASD;;AAQD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASU,QAAT,QAA+D;EAAA,IAA7C;IAAEC,EAAF;IAAMC,OAAN;IAAeX;EAAf,CAA6C;EACpE,CACEY,kBAAkB,EADpB,oDAAS;EAAA;EAGP;EAHO,sEAAT,YAAS,OAAT;EAOA7B,+CAAO,CACL,CAACE,WAAiBD,iBAAjB,EAAoC6B,MADhC,EAEL,iOAFK,CAAP;EAOA,IAAIC,QAAQ,GAAGC,WAAW,EAA1B;EACA9B,UAAgB,MAAM;IACpB6B,QAAQ,CAACJ,EAAD,EAAK;MAAEC,OAAF;MAAWX;IAAX,CAAL,CAAR;EACD,CAFD;EAIA,OAAO,IAAP;AACD;;AAID;AACA;AACA;AACA;AACA;AACO,SAASgB,MAAT,CAAgBC,MAAhB,EAAgE;EACrE,OAAOC,SAAS,EAAhB;AACD;;AA4BD;AACA;AACA;AACA;AACA;AACO,SAASC,KAAT,CACLF,MADK,EAEsB;EAC3BlC,iDAAS,QAEP,2IAFO,CAAT,YAAS,OAAT;AAKD;;AAWD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASuB,MAAT,QAOoC;EAAA,IAPpB;IACrBd,QAAQ,EAAE4B,YAAY,GAAG,GADJ;IAErB3B,QAAQ,GAAG,IAFU;IAGrBU,QAAQ,EAAEkB,YAHW;IAIrBd,cAAc,GAAGe,MAAc,CAACC,GAJX;IAKrBf,SALqB;IAMrBK,MAAM,EAAEW,UAAU,GAAG;EANA,CAOoB;EACzC,CACE,CAACZ,kBAAkB,EADrB,oDAAS,QAEP,6GAFO,CAAT,YAAS,OAAT;EAMA,IAAIpB,QAAQ,GAAGiC,iBAAiB,CAACL,YAAD,CAAhC;EACA,IAAIM,iBAAiB,GAAGzC,QACtB,OAAO;IAAEO,QAAF;IAAYgB,SAAZ;IAAuBK,MAAM,EAAEW;EAA/B,CAAP,CADsB,EAEtB,CAAChC,QAAD,EAAWgB,SAAX,EAAsBgB,UAAtB,CAFsB,CAAxB;EAKA,IAAI,OAAOH,YAAP,KAAwB,QAA5B,EAAsC;IACpCA,YAAY,GAAGM,SAAS,CAACN,YAAD,CAAxB;EACD;EAED,IAAI;IACFO,QAAQ,GAAG,GADT;IAEFC,MAAM,GAAG,EAFP;IAGFC,IAAI,GAAG,EAHL;IAIF9B,KAAK,GAAG,IAJN;IAKFlB,GAAG,GAAG;EALJ,IAMAuC,YANJ;EAQA,IAAIlB,QAAQ,GAAGlB,QAAc,MAAM;IACjC,IAAI8C,gBAAgB,GAAGC,aAAa,CAACJ,QAAD,EAAWpC,QAAX,CAApC;IAEA,IAAIuC,gBAAgB,IAAI,IAAxB,EAA8B;MAC5B,OAAO,IAAP;IACD;IAED,OAAO;MACLH,QAAQ,EAAEG,gBADL;MAELF,MAFK;MAGLC,IAHK;MAIL9B,KAJK;MAKLlB;IALK,CAAP;EAOD,CAdc,EAcZ,CAACU,QAAD,EAAWoC,QAAX,EAAqBC,MAArB,EAA6BC,IAA7B,EAAmC9B,KAAnC,EAA0ClB,GAA1C,CAdY,CAAf;EAgBAC,+CAAO,CACLoB,QAAQ,IAAI,IADP,EAEL,wBAAqBX,QAArB,iDACMoC,QADN,GACiBC,MADjB,GAC0BC,IAD1B,iGAFK,CAAP;EAOA,IAAI3B,QAAQ,IAAI,IAAhB,EAAsB;IACpB,OAAO,IAAP;EACD;EAED,oBACEE,cAACrB,iBAAD,CAAmBiD,QAAnB;IAA4BC,KAAK,EAAER;EAAnC,gBACErB,cAAClB,eAAD,CAAiB8C,QAAjB;IACExC,QAAQ,EAAEA,QADZ;IAEEyC,KAAK,EAAE;MAAE/B,QAAF;MAAYI;IAAZ;EAFT,EADF,CADF;AAQD;;AAOD;AACA;AACA;AACA;AACA;AACA;AACO,SAAS4B,MAAT,QAGoC;EAAA,IAHpB;IACrB1C,QADqB;IAErBU;EAFqB,CAGoB;EACzC,OAAOiC,SAAS,CAACC,wBAAwB,CAAC5C,QAAD,CAAzB,EAAqCU,QAArC,CAAhB;AACD;AAGD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASmC,OAAT,CAAiB5B,EAAjB,EAAiC;EACtC,CACEE,kBAAkB,EADpB,oDAAS;EAAA;EAGP;EAHO,qEAAT,YAAS,OAAT;EAOA,IAAI;IAAEpB,QAAF;IAAYgB;EAAZ,IAA0BvB,WAAiBD,iBAAjB,CAA9B;EACA,IAAI;IAAE8C,IAAF;IAAQF,QAAR;IAAkBC;EAAlB,IAA6BU,eAAe,CAAC7B,EAAD,CAAhD;EAEA,IAAI8B,cAAc,GAAGZ,QAArB;EACA,IAAIpC,QAAQ,KAAK,GAAjB,EAAsB;IACpB,IAAIiD,UAAU,GAAGC,aAAa,CAAChC,EAAD,CAA9B;IACA,IAAIiC,aAAa,GAAGF,UAAU,IAAI,IAAd,IAAsBA,UAAU,CAACG,QAAX,CAAoB,GAApB,CAA1C;IACAJ,cAAc,GACZZ,QAAQ,KAAK,GAAb,GACIpC,QAAQ,IAAImD,aAAa,GAAG,GAAH,GAAS,EAA1B,CADZ,GAEIE,SAAS,CAAC,CAACrD,QAAD,EAAWoC,QAAX,CAAD,CAHf;EAID;EAED,OAAOpB,SAAS,CAACsC,UAAV,CAAqB;IAAElB,QAAQ,EAAEY,cAAZ;IAA4BX,MAA5B;IAAoCC;EAApC,CAArB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;;AACO,SAASlB,kBAAT,GAAuC;EAC5C,OAAO3B,WAAiBE,eAAjB,KAAqC,IAA5C;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAAS4D,WAAT,GAAiC;EACtC,CACEnC,kBAAkB,EADpB,oDAAS;EAAA;EAGP;EAHO,yEAAT,YAAS,OAAT;EAOA,OAAO3B,WAAiBE,eAAjB,EAAkCgB,QAAzC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACO,SAAS6C,iBAAT,GAA6C;EAClD,OAAO/D,WAAiBE,eAAjB,EAAkCoB,cAAzC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAAS0C,QAAT,CACLC,OADK,EAEuB;EAC5B,CACEtC,kBAAkB,EADpB,oDAAS;EAAA;EAGP;EAHO,sEAAT,YAAS,OAAT;EAOA,OAAOuC,SAAS,CAACD,OAAD,EAAUH,WAAW,GAAGnB,QAAxB,CAAhB;AACD;AAED;AACA;AACA;;AAWA;AACA;AACA;AACA;AACA;AACA;AACO,SAASb,WAAT,GAAyC;EAC9C,CACEH,kBAAkB,EADpB,oDAAS;EAAA;EAGP;EAHO,yEAAT,YAAS,OAAT;EAOA,IAAI;IAAEpB,QAAF;IAAYgB;EAAZ,IAA0BvB,WAAiBD,iBAAjB,CAA9B;EACA,IAAI;IAAEM;EAAF,IAAcL,WAAiBG,YAAjB,CAAlB;EACA,IAAI;IAAEwC,QAAQ,EAAEwB;EAAZ,IAAiCL,WAAW,EAAhD;EAEA,IAAIM,kBAAkB,GAAGC,IAAI,CAACC,SAAL,CACvBjE,OAAO,CAACkE,GAAR,CAAYC,KAAK,IAAIA,KAAK,CAACC,YAA3B,CADuB,CAAzB;EAIA,IAAIC,SAAS,GAAG1E,OAAa,KAAb,CAAhB;EACAA,UAAgB,MAAM;IACpB0E,SAAS,CAAC9D,OAAV,GAAoB,IAApB;EACD,CAFD;EAIA,IAAIiB,QAA0B,GAAG7B,YAC/B,UAACyB,EAAD,EAAkBkD,OAAlB,EAAuE;IAAA,IAArDA,OAAqD;MAArDA,OAAqD,GAAP,EAAO;IAAA;IACrE7E,+CAAO,CACL4E,SAAS,CAAC9D,OADL,EAEL,oGAFK,CAAP;IAMA,IAAI,CAAC8D,SAAS,CAAC9D,OAAf,EAAwB;IAExB,IAAI,OAAOa,EAAP,KAAc,QAAlB,EAA4B;MAC1BF,SAAS,CAACqD,EAAV,CAAanD,EAAb;MACA;IACD;IAED,IAAIoD,IAAI,GAAGC,SAAS,CAClBrD,EADkB,EAElB4C,IAAI,CAACU,KAAL,CAAWX,kBAAX,CAFkB,EAGlBD,gBAHkB,CAApB;IAMA,IAAI5D,QAAQ,KAAK,GAAjB,EAAsB;MACpBsE,IAAI,CAAClC,QAAL,GAAgBiB,SAAS,CAAC,CAACrD,QAAD,EAAWsE,IAAI,CAAClC,QAAhB,CAAD,CAAzB;IACD;IAED,CAAC,CAAC,CAACgC,OAAO,CAACjD,OAAV,GAAoBH,SAAS,CAACG,OAA9B,GAAwCH,SAAS,CAACyD,IAAnD,EACEH,IADF,EAEEF,OAAO,CAAC5D,KAFV;EAID,CA7B8B,EA8B/B,CAACR,QAAD,EAAWgB,SAAX,EAAsB6C,kBAAtB,EAA0CD,gBAA1C,CA9B+B,CAAjC;EAiCA,OAAOtC,QAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACO,SAASI,SAAT,GAAgD;EACrD,OAAOjC,WAAiBG,YAAjB,EAA+BC,MAAtC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACO,SAAS6E,SAAT,GAEL;EACA,IAAI;IAAE5E;EAAF,IAAcL,WAAiBG,YAAjB,CAAlB;EACA,IAAI+E,UAAU,GAAG7E,OAAO,CAACA,OAAO,CAAC8E,MAAR,GAAiB,CAAlB,CAAxB;EACA,OAAOD,UAAU,GAAIA,UAAU,CAACE,MAAf,GAAgC,EAAjD;AACD;AAED;AACA;AACA;AACA;AACA;;AACO,SAAS9B,eAAT,CAAyB7B,EAAzB,EAAuC;EAC5C,IAAI;IAAEpB;EAAF,IAAcL,WAAiBG,YAAjB,CAAlB;EACA,IAAI;IAAEwC,QAAQ,EAAEwB;EAAZ,IAAiCL,WAAW,EAAhD;EAEA,IAAIM,kBAAkB,GAAGC,IAAI,CAACC,SAAL,CACvBjE,OAAO,CAACkE,GAAR,CAAYC,KAAK,IAAIA,KAAK,CAACC,YAA3B,CADuB,CAAzB;EAIA,OAAOzE,QACL,MAAM8E,SAAS,CAACrD,EAAD,EAAK4C,IAAI,CAACU,KAAL,CAAWX,kBAAX,CAAL,EAAqCD,gBAArC,CADV,EAEL,CAAC1C,EAAD,EAAK2C,kBAAL,EAAyBD,gBAAzB,CAFK,CAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAAShB,SAAT,CACLkC,MADK,EAELC,WAFK,EAGsB;EAC3B,CACE3D,kBAAkB,EADpB,oDAAS;EAAA;EAGP;EAHO,uEAAT,YAAS,OAAT;EAOA,IAAI;IAAEtB,OAAO,EAAEkF;EAAX,IAA6BvF,WAAiBG,YAAjB,CAAjC;EACA,IAAI+E,UAAU,GAAGK,aAAa,CAACA,aAAa,CAACJ,MAAd,GAAuB,CAAxB,CAA9B;EACA,IAAIK,YAAY,GAAGN,UAAU,GAAGA,UAAU,CAACE,MAAd,GAAuB,EAApD;EACA,IAAIK,cAAc,GAAGP,UAAU,GAAGA,UAAU,CAACvC,QAAd,GAAyB,GAAxD;EACA,IAAI+C,kBAAkB,GAAGR,UAAU,GAAGA,UAAU,CAACT,YAAd,GAA6B,GAAhE;EACA,IAAIkB,WAAW,GAAGT,UAAU,IAAIA,UAAU,CAACU,KAA3C;EAEA,2CAAa;IACX;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAIC,UAAU,GAAIF,WAAW,IAAIA,WAAW,CAACd,IAA5B,IAAqC,EAAtD;IACAjF,WAAW,CACT6F,cADS,EAET,CAACE,WAAD,IAAgBE,UAAU,CAAClC,QAAX,CAAoB,GAApB,CAFP,EAGT,2EACM8B,cADN,gCAC6CI,UAD7C,kPAK2CA,UAL3C,oCAMWA,UANX,YAHS,CAAX;EAWD;EAED,IAAIC,mBAAmB,GAAGhC,WAAW,EAArC;EAEA,IAAI5C,QAAJ;EACA,IAAIoE,WAAJ,EAAiB;IAAA;IACf,IAAIS,iBAAiB,GACnB,OAAOT,WAAP,KAAuB,QAAvB,GAAkC5C,SAAS,CAAC4C,WAAD,CAA3C,GAA2DA,WAD7D;IAGA,EACEI,kBAAkB,KAAK,GAAvB,8BACEK,iBAAiB,CAACpD,QADpB,qBACEqD,sBAA4BC,UAA5B,CAAuCP,kBAAvC,CADF,CADF,qDAAS,QAGP,qPAEiEA,kBAFjE,iCAGmBK,iBAAiB,CAACpD,QAHrC,0CAHO,CAAT,YAAS,OAAT;IASAzB,QAAQ,GAAG6E,iBAAX;EACD,CAdD,MAcO;IACL7E,QAAQ,GAAG4E,mBAAX;EACD;EAED,IAAInD,QAAQ,GAAGzB,QAAQ,CAACyB,QAAT,IAAqB,GAApC;EACA,IAAIuD,iBAAiB,GACnBR,kBAAkB,KAAK,GAAvB,GACI/C,QADJ,GAEIA,QAAQ,CAACwD,KAAT,CAAeT,kBAAkB,CAACP,MAAlC,KAA6C,GAHnD;EAIA,IAAI9E,OAAO,GAAG+F,WAAW,CAACf,MAAD,EAAS;IAAE1C,QAAQ,EAAEuD;EAAZ,CAAT,CAAzB;EAEA,2CAAa;IACXpG,+CAAO,CACL6F,WAAW,IAAItF,OAAO,IAAI,IADrB,oCAE0Ba,QAAQ,CAACyB,QAFnC,GAE8CzB,QAAQ,CAAC0B,MAFvD,GAEgE1B,QAAQ,CAAC2B,IAFzE,SAAP;IAKA/C,+CAAO,CACLO,OAAO,IAAI,IAAX,IACEA,OAAO,CAACA,OAAO,CAAC8E,MAAR,GAAiB,CAAlB,CAAP,CAA4BS,KAA5B,CAAkCS,OAAlC,KAA8CC,SAF3C,EAGL,sCAAmCpF,QAAQ,CAACyB,QAA5C,GAAuDzB,QAAQ,CAAC0B,MAAhE,GAAyE1B,QAAQ,CAAC2B,IAAlF,2IAHK,CAAP;EAMD;EAED,OAAO0D,cAAc,CACnBlG,OAAO,IACLA,OAAO,CAACkE,GAAR,CAAYC,KAAK,IACfgC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBjC,KAAlB,EAAyB;IACvBY,MAAM,EAAEoB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBjB,YAAlB,EAAgChB,KAAK,CAACY,MAAtC,CADe;IAEvBzC,QAAQ,EAAEiB,SAAS,CAAC,CAAC8B,kBAAD,EAAqBlB,KAAK,CAAC7B,QAA3B,CAAD,CAFI;IAGvB8B,YAAY,EACVD,KAAK,CAACC,YAAN,KAAuB,GAAvB,GACIiB,kBADJ,GAEI9B,SAAS,CAAC,CAAC8B,kBAAD,EAAqBlB,KAAK,CAACC,YAA3B,CAAD;EANQ,CAAzB,CADF,CAFiB,EAYnBc,aAZmB,CAArB;AAcD;AAGD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASnC,wBAAT,CACL5C,QADK,EAEU;EACf,IAAI6E,MAAqB,GAAG,EAA5B;EAEArF,SAAe0G,OAAf,CAAuBlG,QAAvB,EAAiC6F,OAAO,IAAI;IAC1C,IAAI,eAACrG,eAAqBqG,OAArB,CAAL,EAAoC;MAClC;MACA;MACA;IACD;IAED,IAAIA,OAAO,CAACM,IAAR,KAAiB3G,QAArB,EAAqC;MACnC;MACAqF,MAAM,CAACL,IAAP,CAAY4B,KAAZ,CACEvB,MADF,EAEEjC,wBAAwB,CAACiD,OAAO,CAACQ,KAAR,CAAcrG,QAAf,CAF1B;MAIA;IACD;IAED,EACE6F,OAAO,CAACM,IAAR,KAAiBzE,KADnB,qDAAS,eAGL,OAAOmE,OAAO,CAACM,IAAf,KAAwB,QAAxB,GAAmCN,OAAO,CAACM,IAA3C,GAAkDN,OAAO,CAACM,IAAR,CAAaG,IAH1D,6GAAT,YAAS,OAAT;IAOA,IAAIlB,KAAkB,GAAG;MACvBmB,aAAa,EAAEV,OAAO,CAACQ,KAAR,CAAcE,aADN;MAEvBV,OAAO,EAAEA,OAAO,CAACQ,KAAR,CAAcR,OAFA;MAGvBW,KAAK,EAAEX,OAAO,CAACQ,KAAR,CAAcG,KAHE;MAIvBnC,IAAI,EAAEwB,OAAO,CAACQ,KAAR,CAAchC;IAJG,CAAzB;IAOA,IAAIwB,OAAO,CAACQ,KAAR,CAAcrG,QAAlB,EAA4B;MAC1BoF,KAAK,CAACpF,QAAN,GAAiB4C,wBAAwB,CAACiD,OAAO,CAACQ,KAAR,CAAcrG,QAAf,CAAzC;IACD;IAED6E,MAAM,CAACL,IAAP,CAAYY,KAAZ;EACD,CAnCD;EAqCA,OAAOP,MAAP;AACD;AAED;AACA;AACA;;AAiBA;AACA;AACA;AACA;AACA;AACO,SAAS4B,YAAT,CAAsBpC,IAAtB,EAAoCO,MAApC,EAAiE;EAAA,IAA7BA,MAA6B;IAA7BA,MAA6B,GAAZ,EAAY;EAAA;EACtE,OAAOP,IAAI,CACRnD,OADI,CACI,SADJ,EACe,CAACwF,CAAD,EAAIrH,GAAJ,KAAY;IAC9B,EAAUuF,MAAM,CAACvF,GAAD,CAAN,IAAe,IAAzB,qDAAS,wBAAmCA,GAAnC,cAAT,YAAS,OAAT;IACA,OAAOuF,MAAM,CAACvF,GAAD,CAAb;EACD,CAJI,EAKJ6B,OALI,CAKI,QALJ,EAKcwF,CAAC,IAClB9B,MAAM,CAAC,GAAD,CAAN,IAAe,IAAf,GAAsB,EAAtB,GAA2BA,MAAM,CAAC,GAAD,CAAN,CAAY1D,OAAZ,CAAoB,MAApB,EAA4B,GAA5B,CANxB,CAAP;AAQD;AAED;AACA;AACA;;AAoBA;AACA;AACA;AACA;AACA;AACO,SAAS0E,WAAT,CACLf,MADK,EAELC,WAFK,EAGL/E,QAHK,EAIgB;EAAA,IADrBA,QACqB;IADrBA,QACqB,GADV,GACU;EAAA;EACrB,IAAIW,QAAQ,GACV,OAAOoE,WAAP,KAAuB,QAAvB,GAAkC5C,SAAS,CAAC4C,WAAD,CAA3C,GAA2DA,WAD7D;EAGA,IAAI3C,QAAQ,GAAGI,aAAa,CAAC7B,QAAQ,CAACyB,QAAT,IAAqB,GAAtB,EAA2BpC,QAA3B,CAA5B;EAEA,IAAIoC,QAAQ,IAAI,IAAhB,EAAsB;IACpB,OAAO,IAAP;EACD;EAED,IAAIwE,QAAQ,GAAGC,aAAa,CAAC/B,MAAD,CAA5B;EACAgC,iBAAiB,CAACF,QAAD,CAAjB;EAEA,IAAI9G,OAAO,GAAG,IAAd;EACA,KAAK,IAAIiH,CAAC,GAAG,CAAb,EAAgBjH,OAAO,IAAI,IAAX,IAAmBiH,CAAC,GAAGH,QAAQ,CAAChC,MAAhD,EAAwD,EAAEmC,CAA1D,EAA6D;IAC3DjH,OAAO,GAAGkH,gBAAgB,CAACJ,QAAQ,CAACG,CAAD,CAAT,EAAcjC,MAAd,EAAsB1C,QAAtB,CAA1B;EACD;EAED,OAAOtC,OAAP;AACD;AAcD,SAAS+G,aAAT,CACE/B,MADF,EAEE8B,QAFF,EAGEK,WAHF,EAIE3B,UAJF,EAKiB;EAAA,IAHfsB,QAGe;IAHfA,QAGe,GAHW,EAGX;EAAA;EAAA,IAFfK,WAEe;IAFfA,WAEe,GAFY,EAEZ;EAAA;EAAA,IADf3B,UACe;IADfA,UACe,GADF,EACE;EAAA;EACfR,MAAM,CAACqB,OAAP,CAAe,CAACd,KAAD,EAAQoB,KAAR,KAAkB;IAC/B,IAAIS,IAAe,GAAG;MACpBC,YAAY,EAAE9B,KAAK,CAACf,IAAN,IAAc,EADR;MAEpBkC,aAAa,EAAEnB,KAAK,CAACmB,aAAN,KAAwB,IAFnB;MAGpBY,aAAa,EAAEX;IAHK,CAAtB;IAMA,IAAIS,IAAI,CAACC,YAAL,CAAkBzB,UAAlB,CAA6B,GAA7B,CAAJ,EAAuC;MACrC,CACEwB,IAAI,CAACC,YAAL,CAAkBzB,UAAlB,CAA6BJ,UAA7B,CADF,oDAAS,QAEP,2BAAwB4B,IAAI,CAACC,YAA7B,qCACM7B,UADN,oHAFO,CAAT,YAAS,OAAT;MAOA4B,IAAI,CAACC,YAAL,GAAoBD,IAAI,CAACC,YAAL,CAAkBvB,KAAlB,CAAwBN,UAAU,CAACV,MAAnC,CAApB;IACD;IAED,IAAIN,IAAI,GAAGjB,SAAS,CAAC,CAACiC,UAAD,EAAa4B,IAAI,CAACC,YAAlB,CAAD,CAApB;IACA,IAAIE,UAAU,GAAGJ,WAAW,CAACK,MAAZ,CAAmBJ,IAAnB,CAAjB,CAnB+B;IAsB/B;IACA;;IACA,IAAI7B,KAAK,CAACpF,QAAN,IAAkBoF,KAAK,CAACpF,QAAN,CAAe2E,MAAf,GAAwB,CAA9C,EAAiD;MAC/C,EACES,KAAK,CAACoB,KAAN,KAAgB,IADlB,qDAAS,QAEP,qGACuCnC,IADvC,SAFO,CAAT,YAAS,OAAT;MAMAuC,aAAa,CAACxB,KAAK,CAACpF,QAAP,EAAiB2G,QAAjB,EAA2BS,UAA3B,EAAuC/C,IAAvC,CAAb;IACD,CAhC8B;IAmC/B;;IACA,IAAIe,KAAK,CAACf,IAAN,IAAc,IAAd,IAAsB,CAACe,KAAK,CAACoB,KAAjC,EAAwC;MACtC;IACD;IAEDG,QAAQ,CAACnC,IAAT,CAAc;MAAEH,IAAF;MAAQiD,KAAK,EAAEC,YAAY,CAAClD,IAAD,EAAOe,KAAK,CAACoB,KAAb,CAA3B;MAAgDY;IAAhD,CAAd;EACD,CAzCD;EA2CA,OAAOT,QAAP;AACD;AAED,SAASE,iBAAT,CAA2BF,QAA3B,EAA0D;EACxDA,QAAQ,CAACa,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KACZD,CAAC,CAACH,KAAF,KAAYI,CAAC,CAACJ,KAAd,GACII,CAAC,CAACJ,KAAF,GAAUG,CAAC,CAACH,KADhB;EAAA,EAEIK,cAAc,CACZF,CAAC,CAACL,UAAF,CAAarD,GAAb,CAAiBkD,IAAI,IAAIA,IAAI,CAACE,aAA9B,CADY,EAEZO,CAAC,CAACN,UAAF,CAAarD,GAAb,CAAiBkD,IAAI,IAAIA,IAAI,CAACE,aAA9B,CAFY,CAHpB;AAQD;AAED,MAAMS,OAAO,GAAG,QAAhB;AACA,MAAMC,mBAAmB,GAAG,CAA5B;AACA,MAAMC,eAAe,GAAG,CAAxB;AACA,MAAMC,iBAAiB,GAAG,CAA1B;AACA,MAAMC,kBAAkB,GAAG,EAA3B;AACA,MAAMC,YAAY,GAAG,CAAC,CAAtB;AACA,MAAMC,OAAO,GAAIC,CAAD,IAAeA,CAAC,KAAK,GAArC;AAEA,SAASZ,YAAT,CAAsBlD,IAAtB,EAAoCmC,KAApC,EAAwE;EACtE,IAAI4B,QAAQ,GAAG/D,IAAI,CAACgE,KAAL,CAAW,GAAX,CAAf;EACA,IAAIC,YAAY,GAAGF,QAAQ,CAACzD,MAA5B;EACA,IAAIyD,QAAQ,CAACG,IAAT,CAAcL,OAAd,CAAJ,EAA4B;IAC1BI,YAAY,IAAIL,YAAhB;EACD;EAED,IAAIzB,KAAJ,EAAW;IACT8B,YAAY,IAAIR,eAAhB;EACD;EAED,OAAOM,QAAQ,CACZI,MADI,CACGL,CAAC,IAAI,CAACD,OAAO,CAACC,CAAD,CADhB,EAEJM,MAFI,CAGH,CAACnB,KAAD,EAAQoB,OAAR,KACEpB,KAAK,IACJM,OAAO,CAACe,IAAR,CAAaD,OAAb,IACGb,mBADH,GAEGa,OAAO,KAAK,EAAZ,GACAX,iBADA,GAEAC,kBALC,CAJJ,EAUHM,YAVG,CAAP;AAYD;AAED,SAASX,cAAT,CAAwBF,CAAxB,EAAqCC,CAArC,EAA0D;EACxD,IAAIkB,QAAQ,GACVnB,CAAC,CAAC9C,MAAF,KAAa+C,CAAC,CAAC/C,MAAf,IAAyB8C,CAAC,CAAC9B,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAZ,EAAekD,KAAf,CAAqB,CAACC,CAAD,EAAIhC,CAAJ,KAAUgC,CAAC,KAAKpB,CAAC,CAACZ,CAAD,CAAtC,CAD3B;EAGA,OAAO8B,QAAQ;EAAA;EAEX;EACA;EACA;EACAnB,CAAC,CAACA,CAAC,CAAC9C,MAAF,GAAW,CAAZ,CAAD,GAAkB+C,CAAC,CAACA,CAAC,CAAC/C,MAAF,GAAW,CAAZ,CALR;EAAA;EAOX;EACA,CARJ;AASD;AAED,SAASoC,gBAAT,CACEgC,MADF;AAAA;AAGEC,SAHF,EAIE7G,QAJF,EAKiC;EAC/B,IAAI0C,MAAM,GAAGmE,SAAb;EACA,IAAI;IAAE5B;EAAF,IAAiB2B,MAArB;EAEA,IAAIE,aAAa,GAAG,EAApB;EACA,IAAIC,eAAe,GAAG,GAAtB;EACA,IAAIrJ,OAAqB,GAAG,EAA5B;EACA,KAAK,IAAIiH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,UAAU,CAACzC,MAA/B,EAAuC,EAAEmC,CAAzC,EAA4C;IAC1C,IAAIG,IAAI,GAAGG,UAAU,CAACN,CAAD,CAArB;IACA,IAAIqC,GAAG,GAAGrC,CAAC,KAAKM,UAAU,CAACzC,MAAX,GAAoB,CAApC;IACA,IAAIe,iBAAiB,GACnBwD,eAAe,KAAK,GAApB,GACI/G,QADJ,GAEIA,QAAQ,CAACwD,KAAT,CAAeuD,eAAe,CAACvE,MAA/B,KAA0C,GAHhD;IAIA,IAAIX,KAAK,GAAGN,SAAS,CACnB;MAAEW,IAAI,EAAE4C,IAAI,CAACC,YAAb;MAA2BX,aAAa,EAAEU,IAAI,CAACV,aAA/C;MAA8D4C;IAA9D,CADmB,EAEnBzD,iBAFmB,CAArB;IAKA,IAAI,CAAC1B,KAAL,EAAY,OAAO,IAAP;IAEZgC,MAAM,CAACC,MAAP,CAAcgD,aAAd,EAA6BjF,KAAK,CAACY,MAAnC;IAEA,IAAIQ,KAAK,GAAGP,MAAM,CAACoC,IAAI,CAACE,aAAN,CAAlB;IAEAtH,OAAO,CAAC2E,IAAR,CAAa;MACXI,MAAM,EAAEqE,aADG;MAEX9G,QAAQ,EAAEiB,SAAS,CAAC,CAAC8F,eAAD,EAAkBlF,KAAK,CAAC7B,QAAxB,CAAD,CAFR;MAGX8B,YAAY,EAAEb,SAAS,CAAC,CAAC8F,eAAD,EAAkBlF,KAAK,CAACC,YAAxB,CAAD,CAHZ;MAIXmB;IAJW,CAAb;IAOA,IAAIpB,KAAK,CAACC,YAAN,KAAuB,GAA3B,EAAgC;MAC9BiF,eAAe,GAAG9F,SAAS,CAAC,CAAC8F,eAAD,EAAkBlF,KAAK,CAACC,YAAxB,CAAD,CAA3B;IACD;IAEDY,MAAM,GAAGO,KAAK,CAACpF,QAAf;EACD;EAED,OAAOH,OAAP;AACD;AAED;AACA;AACA;;AACO,SAASuJ,aAAT,CACLvJ,OADK,EAEsB;EAC3B,OAAOkG,cAAc,CAAClG,OAAD,CAArB;AACD;AAED,SAASkG,cAAT,CACElG,OADF,EAEEkF,aAFF,EAG6B;EAAA,IAD3BA,aAC2B;IAD3BA,aAC2B,GADG,EACH;EAAA;EAC3B,IAAIlF,OAAO,IAAI,IAAf,EAAqB,OAAO,IAAP;EAErB,OAAOA,OAAO,CAACwJ,WAAR,CAAoB,CAACzJ,MAAD,EAASoE,KAAT,EAAgBwC,KAAhB,KAA0B;IACnD,oBACE5F,cAACjB,YAAD,CAAc6C,QAAd;MACExC,QAAQ,EACNgE,KAAK,CAACoB,KAAN,CAAYS,OAAZ,KAAwBC,SAAxB,GAAoC9B,KAAK,CAACoB,KAAN,CAAYS,OAAhD,gBAA0DjF,cAACW,MAAD,OAF9D;MAIEkB,KAAK,EAAE;QACL7C,MADK;QAELC,OAAO,EAAEkF,aAAa,CAACsC,MAAd,CAAqBxH,OAAO,CAAC8F,KAAR,CAAc,CAAd,EAAiBa,KAAK,GAAG,CAAzB,CAArB;MAFJ;IAJT,EADF;EAWD,CAZM,EAYJ,IAZI,CAAP;AAaD;AAED;AACA;AACA;;AA6CA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS9C,SAAT,CACLD,OADK,EAELtB,QAFK,EAGuB;EAC5B,IAAI,OAAOsB,OAAP,KAAmB,QAAvB,EAAiC;IAC/BA,OAAO,GAAG;MAAEY,IAAI,EAAEZ,OAAR;MAAiB8C,aAAa,EAAE,KAAhC;MAAuC4C,GAAG,EAAE;IAA5C,CAAV;EACD;EAED,IAAI,CAACG,OAAD,EAAUC,UAAV,IAAwBC,WAAW,CACrC/F,OAAO,CAACY,IAD6B,EAErCZ,OAAO,CAAC8C,aAF6B,EAGrC9C,OAAO,CAAC0F,GAH6B,CAAvC;EAMA,IAAInF,KAAK,GAAG7B,QAAQ,CAAC6B,KAAT,CAAesF,OAAf,CAAZ;EACA,IAAI,CAACtF,KAAL,EAAY,OAAO,IAAP;EAEZ,IAAIkF,eAAe,GAAGlF,KAAK,CAAC,CAAD,CAA3B;EACA,IAAIC,YAAY,GAAGiF,eAAe,CAAChI,OAAhB,CAAwB,SAAxB,EAAmC,IAAnC,CAAnB;EACA,IAAIuI,aAAa,GAAGzF,KAAK,CAAC2B,KAAN,CAAY,CAAZ,CAApB;EACA,IAAIf,MAAc,GAAG2E,UAAU,CAACd,MAAX,CACnB,CAACiB,IAAD,EAAOC,SAAP,EAAkBnD,KAAlB,KAA4B;IAC1B;IACA;IACA,IAAImD,SAAS,KAAK,GAAlB,EAAuB;MACrB,IAAIC,UAAU,GAAGH,aAAa,CAACjD,KAAD,CAAb,IAAwB,EAAzC;MACAvC,YAAY,GAAGiF,eAAe,CAC3BvD,KADY,CACN,CADM,EACHuD,eAAe,CAACvE,MAAhB,GAAyBiF,UAAU,CAACjF,MADjC,EAEZzD,OAFY,CAEJ,SAFI,EAEO,IAFP,CAAf;IAGD;IAEDwI,IAAI,CAACC,SAAD,CAAJ,GAAkBE,wBAAwB,CACxCJ,aAAa,CAACjD,KAAD,CAAb,IAAwB,EADgB,EAExCmD,SAFwC,CAA1C;IAIA,OAAOD,IAAP;EACD,CAhBkB,EAiBnB,EAjBmB,CAArB;EAoBA,OAAO;IACL9E,MADK;IAELzC,QAAQ,EAAE+G,eAFL;IAGLjF,YAHK;IAILR;EAJK,CAAP;AAMD;AAED,SAAS+F,WAAT,CACEnF,IADF,EAEEkC,aAFF,EAGE4C,GAHF,EAIsB;EAAA,IAFpB5C,aAEoB;IAFpBA,aAEoB,GAFJ,KAEI;EAAA;EAAA,IADpB4C,GACoB;IADpBA,GACoB,GADd,IACc;EAAA;EACpB7J,+CAAO,CACL+E,IAAI,KAAK,GAAT,IAAgB,CAACA,IAAI,CAAClB,QAAL,CAAc,GAAd,CAAjB,IAAuCkB,IAAI,CAAClB,QAAL,CAAc,IAAd,CADlC,EAEL,kBAAekB,IAAf,iDACMA,IAAI,CAACnD,OAAL,CAAa,KAAb,EAAoB,IAApB,CADN,wJAGsCmD,IAAI,CAACnD,OAAL,CAAa,KAAb,EAAoB,IAApB,CAHtC,SAFK,CAAP;EAQA,IAAIqI,UAAoB,GAAG,EAA3B;EACA,IAAIO,YAAY,GACd,MACAzF,IAAI,CACDnD,OADH,CACW,SADX,EACsB,EADtB;EAAA,CAEGA,OAFH,CAEW,MAFX,EAEmB,GAFnB;EAAA,CAGGA,OAHH,CAGW,qBAHX,EAGkC,MAHlC;EAAA,CAIGA,OAJH,CAIW,SAJX,EAIsB,CAACwF,CAAD,EAAYiD,SAAZ,KAAkC;IACpDJ,UAAU,CAAC/E,IAAX,CAAgBmF,SAAhB;IACA,OAAO,WAAP;EACD,CAPH,CAFF;EAWA,IAAItF,IAAI,CAAClB,QAAL,CAAc,GAAd,CAAJ,EAAwB;IACtBoG,UAAU,CAAC/E,IAAX,CAAgB,GAAhB;IACAsF,YAAY,IACVzF,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,IAAzB,GACI,OADJ;IAAA,EAEI,mBAHN,CAFsB;EAMvB,CAND,MAMO;IACLyF,YAAY,IAAIX,GAAG,GACf,OADe;IAAA;IAAA;IAGf;IACA;IACA,WALJ;EAMD;EAED,IAAIG,OAAO,GAAG,IAAIS,MAAJ,CAAWD,YAAX,EAAyBvD,aAAa,GAAGT,SAAH,GAAe,GAArD,CAAd;EAEA,OAAO,CAACwD,OAAD,EAAUC,UAAV,CAAP;AACD;AAED,SAASM,wBAAT,CAAkCpH,KAAlC,EAAiDkH,SAAjD,EAAoE;EAClE,IAAI;IACF,OAAOK,kBAAkB,CAACvH,KAAD,CAAzB;EACD,CAFD,CAEE,OAAOwH,KAAP,EAAc;IACd3K,+CAAO,CACL,KADK,EAEL,mCAAgCqK,SAAhC,0DACkBlH,KADlB,8FAEqCwH,KAFrC,QAFK,CAAP;IAOA,OAAOxH,KAAP;EACD;AACF;AAED;AACA;AACA;AACA;AACA;;AACO,SAASyH,WAAT,CAAqBjJ,EAArB,EAA6BkJ,YAA7B,EAAuD;EAAA,IAA1BA,YAA0B;IAA1BA,YAA0B,GAAX,GAAW;EAAA;EAC5D,IAAI;IACFhI,QAAQ,EAAEa,UADR;IAEFZ,MAAM,GAAG,EAFP;IAGFC,IAAI,GAAG;EAHL,IAIA,OAAOpB,EAAP,KAAc,QAAd,GAAyBiB,SAAS,CAACjB,EAAD,CAAlC,GAAyCA,EAJ7C;EAMA,IAAIkB,QAAQ,GAAGa,UAAU,GACrBA,UAAU,CAACyC,UAAX,CAAsB,GAAtB,IACEzC,UADF,GAEEoH,eAAe,CAACpH,UAAD,EAAamH,YAAb,CAHI,GAIrBA,YAJJ;EAMA,OAAO;IACLhI,QADK;IAELC,MAAM,EAAEiI,eAAe,CAACjI,MAAD,CAFlB;IAGLC,IAAI,EAAEiI,aAAa,CAACjI,IAAD;EAHd,CAAP;AAKD;AAED,SAAS+H,eAAT,CAAyBlD,YAAzB,EAA+CiD,YAA/C,EAA6E;EAC3E,IAAI/B,QAAQ,GAAG+B,YAAY,CAACjJ,OAAb,CAAqB,MAArB,EAA6B,EAA7B,EAAiCmH,KAAjC,CAAuC,GAAvC,CAAf;EACA,IAAIkC,gBAAgB,GAAGrD,YAAY,CAACmB,KAAb,CAAmB,GAAnB,CAAvB;EAEAkC,gBAAgB,CAACrE,OAAjB,CAAyBwC,OAAO,IAAI;IAClC,IAAIA,OAAO,KAAK,IAAhB,EAAsB;MACpB;MACA,IAAIN,QAAQ,CAACzD,MAAT,GAAkB,CAAtB,EAAyByD,QAAQ,CAACoC,GAAT;IAC1B,CAHD,MAGO,IAAI9B,OAAO,KAAK,GAAhB,EAAqB;MAC1BN,QAAQ,CAAC5D,IAAT,CAAckE,OAAd;IACD;EACF,CAPD;EASA,OAAON,QAAQ,CAACzD,MAAT,GAAkB,CAAlB,GAAsByD,QAAQ,CAACqC,IAAT,CAAc,GAAd,CAAtB,GAA2C,GAAlD;AACD;AAED,SAASnG,SAAT,CACEoG,KADF,EAEEC,cAFF,EAGEhH,gBAHF,EAIQ;EACN,IAAI1C,EAAE,GAAG,OAAOyJ,KAAP,KAAiB,QAAjB,GAA4BxI,SAAS,CAACwI,KAAD,CAArC,GAA+CA,KAAxD;EACA,IAAI1H,UAAU,GAAG0H,KAAK,KAAK,EAAV,IAAgBzJ,EAAE,CAACkB,QAAH,KAAgB,EAAhC,GAAqC,GAArC,GAA2ClB,EAAE,CAACkB,QAA/D,CAFM;EAKN;EACA;EACA;EACA;EACA;EACA;;EACA,IAAIyI,IAAJ;EACA,IAAI5H,UAAU,IAAI,IAAlB,EAAwB;IACtB4H,IAAI,GAAGjH,gBAAP;EACD,CAFD,MAEO;IACL,IAAIkH,kBAAkB,GAAGF,cAAc,CAAChG,MAAf,GAAwB,CAAjD;IAEA,IAAI3B,UAAU,CAACyC,UAAX,CAAsB,IAAtB,CAAJ,EAAiC;MAC/B,IAAIqF,UAAU,GAAG9H,UAAU,CAACqF,KAAX,CAAiB,GAAjB,CAAjB,CAD+B;MAI/B;MACA;;MACA,OAAOyC,UAAU,CAAC,CAAD,CAAV,KAAkB,IAAzB,EAA+B;QAC7BA,UAAU,CAACC,KAAX;QACAF,kBAAkB,IAAI,CAAtB;MACD;MAED5J,EAAE,CAACkB,QAAH,GAAc2I,UAAU,CAACL,IAAX,CAAgB,GAAhB,CAAd;IACD,CAfI;IAkBL;;IACAG,IAAI,GAAGC,kBAAkB,IAAI,CAAtB,GAA0BF,cAAc,CAACE,kBAAD,CAAxC,GAA+D,GAAtE;EACD;EAED,IAAIxG,IAAI,GAAG6F,WAAW,CAACjJ,EAAD,EAAK2J,IAAL,CAAtB,CApCM;;EAuCN,IACE5H,UAAU,IACVA,UAAU,KAAK,GADf,IAEAA,UAAU,CAACG,QAAX,CAAoB,GAApB,CAFA,IAGA,CAACkB,IAAI,CAAClC,QAAL,CAAcgB,QAAd,CAAuB,GAAvB,CAJH,EAKE;IACAkB,IAAI,CAAClC,QAAL,IAAiB,GAAjB;EACD;EAED,OAAOkC,IAAP;AACD;AAED,SAASpB,aAAT,CAAuBhC,EAAvB,EAAmD;EACjD;EACA,OAAOA,EAAE,KAAK,EAAP,IAAcA,EAAD,CAAakB,QAAb,KAA0B,EAAvC,GACH,GADG,GAEH,OAAOlB,EAAP,KAAc,QAAd,GACAiB,SAAS,CAACjB,EAAD,CAAT,CAAckB,QADd,GAEAlB,EAAE,CAACkB,QAJP;AAKD;AAED,SAASI,aAAT,CAAuBJ,QAAvB,EAAyCpC,QAAzC,EAA0E;EACxE,IAAIA,QAAQ,KAAK,GAAjB,EAAsB,OAAOoC,QAAP;EAEtB,IAAI,CAACA,QAAQ,CAAC6I,WAAT,GAAuBvF,UAAvB,CAAkC1F,QAAQ,CAACiL,WAAT,EAAlC,CAAL,EAAgE;IAC9D,OAAO,IAAP;EACD;EAED,IAAIC,QAAQ,GAAG9I,QAAQ,CAAC+I,MAAT,CAAgBnL,QAAQ,CAAC4E,MAAzB,CAAf;EACA,IAAIsG,QAAQ,IAAIA,QAAQ,KAAK,GAA7B,EAAkC;IAChC;IACA,OAAO,IAAP;EACD;EAED,OAAO9I,QAAQ,CAACwD,KAAT,CAAe5F,QAAQ,CAAC4E,MAAxB,KAAmC,GAA1C;AACD;AAED,MAAMvB,SAAS,GAAI+H,KAAD,IAChBA,KAAK,CAACV,IAAN,CAAW,GAAX,EAAgBvJ,OAAhB,CAAwB,QAAxB,EAAkC,GAAlC,CADF;AAGA,MAAMc,iBAAiB,GAAIG,QAAD,IACxBA,QAAQ,CAACjB,OAAT,CAAiB,MAAjB,EAAyB,EAAzB,EAA6BA,OAA7B,CAAqC,MAArC,EAA6C,GAA7C,CADF;AAGA,MAAMmJ,eAAe,GAAIjI,MAAD,IACtB,CAACA,MAAD,IAAWA,MAAM,KAAK,GAAtB,GACI,EADJ,GAEIA,MAAM,CAACqD,UAAP,CAAkB,GAAlB,IACArD,MADA,GAEA,MAAMA,MALZ;AAOA,MAAMkI,aAAa,GAAIjI,IAAD,IACpB,CAACA,IAAD,IAASA,IAAI,KAAK,GAAlB,GAAwB,EAAxB,GAA6BA,IAAI,CAACoD,UAAL,CAAgB,GAAhB,IAAuBpD,IAAvB,GAA8B,MAAMA,IADnE","names":["invariant","cond","message","Error","warning","console","warn","e","alreadyWarned","warningOnce","key","process","NavigationContext","React","displayName","LocationContext","RouteContext","outlet","matches","MemoryRouter","basename","children","initialEntries","initialIndex","historyRef","current","createMemoryHistory","history","state","setState","action","location","listen","React.createElement","Router","navigationType","navigator","Navigate","to","replace","useInRouterContext","static","navigate","useNavigate","Outlet","_props","useOutlet","Route","basenameProp","locationProp","NavigationType","Pop","staticProp","normalizePathname","navigationContext","parsePath","pathname","search","hash","trailingPathname","stripBasename","Provider","value","Routes","useRoutes","createRoutesFromChildren","useHref","useResolvedPath","joinedPathname","toPathname","getToPathname","endsWithSlash","endsWith","joinPaths","createHref","useLocation","useNavigationType","useMatch","pattern","matchPath","locationPathname","routePathnamesJson","JSON","stringify","map","match","pathnameBase","activeRef","options","go","path","resolveTo","parse","push","useParams","routeMatch","length","params","routes","locationArg","parentMatches","parentParams","parentPathname","parentPathnameBase","parentRoute","route","parentPath","locationFromContext","parsedLocationArg","_parsedLocationArg$pa","startsWith","remainingPathname","slice","matchRoutes","element","undefined","_renderMatches","Object","assign","forEach","type","apply","props","name","caseSensitive","index","generatePath","_","branches","flattenRoutes","rankRouteBranches","i","matchRouteBranch","parentsMeta","meta","relativePath","childrenIndex","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","n","branch","routesArg","matchedParams","matchedPathname","end","renderMatches","reduceRight","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","RegExp","decodeURIComponent","error","resolvePath","fromPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","join","toArg","routePathnames","from","routePathnameIndex","toSegments","shift","toLowerCase","nextChar","charAt","paths"],"sources":["../../../packages/react-router/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport type {\n  History,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Path,\n  To\n} from \"history\";\nimport {\n  Action as NavigationType,\n  createMemoryHistory,\n  parsePath\n} from \"history\";\n\nexport type { Location, Path, To, NavigationType };\n\nfunction invariant(cond: any, message: string): asserts cond {\n  if (!cond) throw new Error(message);\n}\n\nfunction warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// CONTEXT\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport type Navigator = Omit<\n  History,\n  \"action\" | \"location\" | \"back\" | \"forward\" | \"listen\" | \"block\"\n>;\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n}\n\nconst NavigationContext = React.createContext<NavigationContextObject>(null!);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nconst LocationContext = React.createContext<LocationContextObject>(null!);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\ninterface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n}\n\nconst RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: []\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n///////////////////////////////////////////////////////////////////////////////\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/docs/en/v6/api#memoryrouter\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({ initialEntries, initialIndex });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/docs/en/v6/api#navigate\n */\nexport function Navigate({ to, replace, state }: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !React.useContext(NavigationContext).static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let navigate = useNavigate();\n  React.useEffect(() => {\n    navigate(to, { replace, state });\n  });\n\n  return null;\n}\n\nexport interface OutletProps {}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/docs/en/v6/api#outlet\n */\nexport function Outlet(_props: OutletProps): React.ReactElement | null {\n  return useOutlet();\n}\n\nexport interface RouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactElement | null;\n  index?: boolean;\n  path?: string;\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactElement | null;\n  index?: false;\n  path: string;\n}\n\nexport interface LayoutRouteProps {\n  children?: React.ReactNode;\n  element?: React.ReactElement | null;\n}\n\nexport interface IndexRouteProps {\n  element?: React.ReactElement | null;\n  index: true;\n}\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#route\n */\nexport function Route(\n  _props: PathRouteProps | LayoutRouteProps | IndexRouteProps\n): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/docs/en/v6/api#router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  let basename = normalizePathname(basenameProp);\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\"\n  } = locationProp;\n\n  let location = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key\n    };\n  }, [basename, pathname, search, hash, state, key]);\n\n  warning(\n    location != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (location == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider\n        children={children}\n        value={{ location, navigationType }}\n      />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#routes\n */\nexport function Routes({\n  children,\n  location\n}: RoutesProps): React.ReactElement | null {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// HOOKS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usehref\n */\nexport function useHref(to: To): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to);\n\n  let joinedPathname = pathname;\n  if (basename !== \"/\") {\n    let toPathname = getToPathname(to);\n    let endsWithSlash = toPathname != null && toPathname.endsWith(\"/\");\n    joinedPathname =\n      pathname === \"/\"\n        ? basename + (endsWithSlash ? \"/\" : \"\")\n        : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useinroutercontext\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/docs/en/v6/api#uselocation\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigationtype\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns true if the URL for the given \"to\" value matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usematch\n */\nexport function useMatch<ParamKey extends string = string>(\n  pattern: PathPattern | string\n): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  return matchPath(pattern, useLocation().pathname);\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#usenavigate\n */\nexport function useNavigate(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map(match => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: { replace?: boolean; state?: any } = {}) => {\n      warning(\n        activeRef.current,\n        `You should call navigate() in a React.useEffect(), not when ` +\n          `your component is first rendered.`\n      );\n\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname\n      );\n\n      if (basename !== \"/\") {\n        path.pathname = joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useoutlet\n */\nexport function useOutlet(): React.ReactElement | null {\n  return React.useContext(RouteContext).outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useparams\n */\nexport function useParams<Key extends string = string>(): Readonly<\n  Params<Key>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useresolvedpath\n */\nexport function useResolvedPath(to: To): Path {\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    matches.map(match => match.pathnameBase)\n  );\n\n  return React.useMemo(\n    () => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname),\n    [to, routePathnamesJson, locationPathname]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/docs/en/v6/api#useroutes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath}/*\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" does not have an element. ` +\n        `This means it will render an <Outlet /> with a null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  return _renderMatches(\n    matches &&\n      matches.map(match =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([parentPathnameBase, match.pathname]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([parentPathnameBase, match.pathnameBase])\n        })\n      ),\n    parentMatches\n  );\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/docs/en/v6/api#createroutesfromchildren\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, element => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    let route: RouteObject = {\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(element.props.children);\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/api#generatepath\n */\nexport function generatePath(path: string, params: Params = {}): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/*\\*$/, _ =>\n      params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\")\n    );\n}\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface RouteMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObject;\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchroutes\n */\nexport function matchRoutes(\n  routes: RouteObject[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): RouteMatch[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], routes, pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n}\n\ninterface RouteBranch {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta[];\n}\n\nfunction flattenRoutes(\n  routes: RouteObject[],\n  branches: RouteBranch[] = [],\n  parentsMeta: RouteMeta[] = [],\n  parentPath = \"\"\n): RouteBranch[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map(meta => meta.childrenIndex),\n          b.routesMeta.map(meta => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter(s => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<ParamKey extends string = string>(\n  branch: RouteBranch,\n  // TODO: attach original route object inside routesMeta so we don't need this arg\n  routesArg: RouteObject[],\n  pathname: string\n): RouteMatch<ParamKey>[] | null {\n  let routes = routesArg;\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: RouteMatch[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = routes[meta.childrenIndex];\n\n    matches.push({\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: joinPaths([matchedPathname, match.pathnameBase]),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n\n    routes = route.children!;\n  }\n\n  return matches;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n\nfunction _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = []\n): React.ReactElement | null {\n  if (matches == null) return null;\n\n  return matches.reduceRight((outlet, match, index) => {\n    return (\n      <RouteContext.Provider\n        children={\n          match.route.element !== undefined ? match.route.element : <Outlet />\n        }\n        value={{\n          outlet,\n          matches: parentMatches.concat(matches.slice(0, index + 1))\n        }}\n      />\n    );\n  }, null as React.ReactElement | null);\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: string;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/api#matchpath\n */\nexport function matchPath<ParamKey extends string = string>(\n  pattern: PathPattern | string,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, at least match a word boundary. This restricts parent\n        // routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        \"(?:\\\\b|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/api#resolvepath\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : toArg;\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname;\n\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  let from: string;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original to value had one.\n  if (\n    toPathname &&\n    toPathname !== \"/\" &&\n    toPathname.endsWith(\"/\") &&\n    !path.pathname.endsWith(\"/\")\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\nfunction getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\nfunction stripBasename(pathname: string, basename: string): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  let nextChar = pathname.charAt(basename.length);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(basename.length) || \"/\";\n}\n\nconst joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\nconst normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\nconst normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\nconst normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  NavigationContext as UNSAFE_NavigationContext,\n  LocationContext as UNSAFE_LocationContext,\n  RouteContext as UNSAFE_RouteContext\n};\n"]},"metadata":{},"sourceType":"module"}